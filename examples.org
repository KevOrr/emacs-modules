* DONE Adding linear algebra to Emacs with the GSL and dynamic modules
  CLOSED: [2017-07-11 Tue 10:27]
  :PROPERTIES:
  :categories: emacs,dynamic-module
  :date:     2017/07/11 10:27:13
  :updated:  2017/07/11 10:27:13
  :org-url:  http://kitchingroup.cheme.cmu.edu/org/2017/07/11/Adding-linear-algebra-to-Emacs-with-the-GSL-and-dynamic-modules.org
  :permalink: http://kitchingroup.cheme.cmu.edu/blog/2017/07/11/Adding-linear-algebra-to-Emacs-with-the-GSL-and-dynamic-modules/index.html
  :ID:       BEAB5896-BE68-4C32-B049-CE7DD5506922
  :END:

The goal of this post is to be able to solve equations like this one:

\[\left(\begin{array}{cccc}
 0.18& 0.60& 0.57& 0.96 \\
 0.41& 0.24& 0.99& 0.58 \\
 0.14& 0.30& 0.97& 0.66 \\
 0.51& 0.13& 0.19& 0.85 \end{array} \right ) 
\left ( \begin{array}{c} x_0 \\ x_1 \\ x_2 \\ x_3 \end{array} \right )
= \left ( \begin{array}{c} 1.0 \\ 2.0 \\ 3.0 \\ 4.0 \end{array} \right ) \]

The answer is [[https://www.gnu.org/software/gsl/doc/html/linalg.html#examples:][given]] as

\[x = \left ( \begin{array}{c} -4.05205 \\ -12.6056 \\ 1.66091 \\ 8.69377 \end{array} \right ) \]

The syntax we want to use is shown below, and we want it to return a vector containing the solution:

#+BEGIN_SRC emacs-lisp
(let ((A [[0.18 0.60 0.57 0.96]
	  [0.41 0.24 0.99 0.58]
	  [0.14 0.30 0.97 0.66]
	  [0.51 0.13 0.19 0.85]])
      (b [1.0 2.0 3.0 4.0]))
  (gsl-linalg-LU-solve A b))
#+END_SRC

Rather than put all the code in here like I have for the past several posts, I started a git repo at https://github.com/jkitchin/emacs-modules that contains this code. 


The module for this post can be found here: https://github.com/jkitchin/emacs-modules/blob/master/gsl-linalg.c. There are a few notable features in it. First, I started writing/collecting [[https://github.com/jkitchin/emacs-modules/blob/master/emacs-module-helpers.c][some helper functions]] to make these modules simpler to write. For example, look how nice this looks to declare the functions and provide the feature.

#+BEGIN_SRC c
int emacs_module_init(struct emacs_runtime *ert)
{
  emacs_env *env = ert->get_environment(ert);
  
  DEFUN("gsl-linalg-LU-solve", Fgsl_linalg_LU_solve, 2, 2,
	"(gsl-linalg-LU-solve A b).\n" \
	"Solve A x = b for x.\n" \
	"Returns a vector containing the solution x.",
	NULL);
  provide(env, "gsl-linalg");
  
  return 0;
}
#+END_SRC 

The DEFUN and provide function are defined in https://github.com/jkitchin/emacs-modules/blob/master/emacs-module-helpers.c.

Within the module itself, we have to loop over the inputs to create the arrays that GSL wants to solve this problem. Second, after the solution is obtained, we have to build up a vector to return. The solution is in a gsl_vector, and we need to create an array of emacs_value elements containing each element of the gsl_vector as a float, and then create a vector to return to emacs. I use vectors here because it was easy to get the size of the b vector, which is also related to the size of the A matrix.

The repo has a Makefile in it, so we can build this module with:

#+BEGIN_SRC sh
make gsl-linalg.so
#+END_SRC

Once it is compiled, we load it like this. In this post we are in the emacs-modules directory where the gsl-linalg.so library is, and it is not on my load-path, so I add it here.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "."))
(require 'gsl-linalg)
#+END_SRC

#+RESULTS:
: gsl-linalg

Here is one function in the module:

#+BEGIN_SRC emacs-lisp
(describe-function 'gsl-linalg-LU-solve)
#+END_SRC

#+RESULTS:
: gsl-linalg-LU-solve is a Lisp function.
: 
: (gsl-linalg-LU-solve &rest ARGS)
: 
: For more information check the manuals.
: 
: (gsl-linalg-LU-solve A b).
: Solve A x = b for x.
: Returns a vector containing the solution x.

Now, we can solve linear equations like this:

#+BEGIN_SRC emacs-lisp
(gsl-linalg-LU-solve
 [[0.18 0.60 0.57 0.96]
  [0.41 0.24 0.99 0.58]
  [0.14 0.30 0.97 0.66]
  [0.51 0.13 0.19 0.85]]
 [1.0 2.0 3.0 4.0])
#+END_SRC

#+RESULTS:
: [-4.052050229573973 -12.605611395906903 1.6609116267088417 8.693766928795227]


We have a limited ability to confirm this answer. I have written a function that uses blas for multiplication of 2d vectors. You can see from this:

#+BEGIN_SRC emacs-lisp
(gsl-blas-dgemm [[0.18 0.60 0.57 0.96]
		 [0.41 0.24 0.99 0.58]
		 [0.14 0.30 0.97 0.66]
		 [0.51 0.13 0.19 0.85]]
		[[-4.052050229573973]
		 [-12.605611395906903]
		 [1.6609116267088417]
		 [8.693766928795227]])
#+END_SRC

#+RESULTS:
: [[1.0] [1.9999999999999991] [2.9999999999999996] [4.0]]

That within float that indeed $A x = b$.

The main limitation of this module at the moment is that you have to use vectors; you cannot put in a list of numbers. It is possible to make it take lists and vectors, but for now I am leaving it at vectors. Also, it only produces solutions of float numbers (not integers).

The module does not handle 1d vectors well,, e.g. in gsl-linalg-LU-solve example, the right hand side is implied to be a column vector, and we don't have the array broadcasting features of Python yet. Those are doable things for some future day perhaps. For now I am happy to have figured out how to handle arrays!



* A GSL root finder in a dynamic module
  :PROPERTIES:
  :categories: emacs,dynamic-module
  :END:

In a previous [[http://kitchingroup.cheme.cmu.edu/blog/2017/05/21/A-partial-symbolic-numeric-solver-in-emacs-lisp/][post]] I implemented a Newton solver in elisp to solve some problems numerically. Today, we continue the dynamic module studies and implement a bracketed root solver from the GNU Scientific Library (https://www.gnu.org/software/gsl/doc/html/roots.html#examples). I will implement the Brent solver here, which is a bracketed root finder: You specify a bracket that contains the root, and the software automatically finds it. It isn't my favorite solver, I prefer a single initial guess, but this one was easier to implement for now, and the root polishing algorithms in GSL seem to all require the function and derivatives, which I did not want to get into now. 

The elisp signature I want to solve an equation $f(x; params) = 0$ is to following.

#+BEGIN_SRC emacs-lisp
(gsl-root-fsolver-brent f xlo xhi &optional params epsabs epsrel)
#+END_SRC

So, here it is in action.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "."))
(require 'gsl-roots)
#+END_SRC

#+RESULTS:
: gsl-roots

Here is a simple equation $f(x; params) = x^2 - 5 = 0$. The solution should be $\sqrt(5)$

#+BEGIN_SRC emacs-lisp
(gsl-root-fsolver-brent (lambda (x params) (- (* x x) 5)) 0.0 5.0)
#+END_SRC

#+RESULTS:
: 2.2360634081902244

For comparison:

#+BEGIN_SRC emacs-lisp
(sqrt 5)
#+END_SRC

#+RESULTS:
: 2.23606797749979

These differ in about the 5th decimal place. If we lower the relative error (the default is only 1e-3), we get quantitative agreement with the analytical solution.

#+BEGIN_SRC emacs-lisp
(gsl-root-fsolver-brent (lambda (x params) (- (* x x) 5)) 0.0 5.0 nil nil 1e-6)
#+END_SRC

#+RESULTS:
: 2.23606797749979

* List/vector functions

This module
#+BEGIN_SRC c :tangle mod-vector.c
#include "emacs-module.h"
#include <stdlib.h>

/* Declare mandatory GPL symbol.  */
int plugin_is_GPL_compatible;

/* Bind NAME to FUN.  */
static void bind_function (emacs_env *env, const char *name, emacs_value Sfun)
{
  /* Set the function cell of the symbol named NAME to SFUN using
     the 'fset' function.  */

  /* Convert the strings to symbols by interning them */
  emacs_value Qfset = env->intern (env, "fset");
  emacs_value Qsym = env->intern (env, name);

  /* Prepare the arguments array */
  emacs_value args[] = { Qsym, Sfun };

  /* Make the call (2 == nb of arguments) */
  env->funcall (env, Qfset, 2, args);
}

/* Provide FEATURE to Emacs.  */
static void
provide (emacs_env *env, const char *feature)
{
  /* call 'provide' with FEATURE converted to a symbol */

  emacs_value Qfeat = env->intern (env, feature);
  emacs_value Qprovide = env->intern (env, "provide");
  emacs_value args[] = { Qfeat };

  env->funcall (env, Qprovide, 1, args);
}

/*                                                                  */

// This just returns the argument, works for a list.
static emacs_value Ff1 (emacs_env *env, int nargs, emacs_value args[], void *data)
{
  return args[0];
}

// get first element of a vector
static emacs_value Ff2 (emacs_env *env, int nargs, emacs_value args[], void *data)
{
  return env->vec_get(env, args[0], 0);
}

// This just returns a vector of integers!!!
static emacs_value Ff3 (emacs_env *env, int nargs, emacs_value args[], void *data)
{
 int len = 2;
 emacs_value *array = malloc(sizeof(emacs_value) * len);
 array[0] = env->make_integer(env, 2);
 array[1] = env->make_integer(env, 4);

 emacs_value Fvector = env->intern(env, "vector");
 emacs_value vec = env->funcall(env, Fvector, len, array);
 free(array);
 return vec;
}

// return vector * n
static emacs_value Ff4 (emacs_env *env, int nargs, emacs_value args[], void *data)
{
 emacs_value input = args[0];
 double N = env->extract_float(env, args[1]);

 int len = env->vec_size (env, input);

 emacs_value *array = malloc(sizeof(emacs_value) * len);

 // multiply each value by N
 for (ptrdiff_t i = 0; i < len; i++)
   {
     array[i] = env->make_float(env,
				N * env->extract_float(env,
						       env->vec_get (env, input, i)));
   }

 // If you change this to list, you get a list instead!
 emacs_value Fvector = env->intern(env, "vector");
 emacs_value vec = env->funcall(env, Fvector, len, array);
 free(array);
 return vec;
}

// return 2nd element of vector
static emacs_value Ff5 (emacs_env *env, int nargs, emacs_value args[], void *data)
{
 emacs_value vec = args[0];

 return env->vec_get (env, vec, 1);
}

// get second value of second vector
static emacs_value Ff6 (emacs_env *env, int nargs, emacs_value args[], void *data)
{
 emacs_value vec = args[0];
 emacs_value v2 = env->vec_get (env, vec, 1);
 return env->vec_get (env, v2, 1);
}

// index a list
static emacs_value Ff7 (emacs_env *env, int nargs, emacs_value args[], void *data)
{
 emacs_value nth = env->intern(env, "nth");

 return env->funcall (env, nth, 2, args);
}

int emacs_module_init (struct emacs_runtime *ert)
{
  emacs_env *env = ert->get_environment (ert);

#define DEFUN(lsym, csym, amin, amax, doc, data) \
  bind_function (env, lsym, \
		 env->make_function (env, amin, amax, csym, doc, data))

  DEFUN("f1", Ff1, 1, 1, NULL, NULL);
  DEFUN("f2", Ff2, 1, 1, NULL, NULL);
  DEFUN("f3", Ff3, 0, 0, NULL, NULL);
  DEFUN("f4", Ff4, 2, 2, NULL, NULL);
  DEFUN("f5", Ff5, 1, 1, NULL, NULL);
  DEFUN("f6", Ff6, 1, 1, NULL, NULL);
  DEFUN("f7", Ff7, 2, 2, NULL, NULL);

  provide (env, "mod-vector");

  /* loaded successfully */
  return 0;
}
#+END_SRC

#+NAME: build
#+BEGIN_SRC sh :var data=""
rm -f mod-vector.so mod-vector.o
gcc -Wall -I/usr/local/include -fPIC -c mod-vector.c
gcc  -shared -L/usr/local/include -lgsl -o mod-vector.so mod-vector.o
#+END_SRC

#+RESULTS: build

#+BEGIN_SRC emacs-lisp :post build(data=*this*)
(org-babel-tangle)
#+END_SRC

#+RESULTS:
: nil
