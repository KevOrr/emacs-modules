* Adding Linear algebra to Emacs with the GSL and dynamic modules
  :PROPERTIES:
  :categories: emacs,dynamic-module
  :END:

The goal is to be able to solve https://www.gnu.org/software/gsl/doc/html/linalg.html#examples:

\[\left(\begin{array}{cccc}
 0.18& 0.60& 0.57& 0.96 \\
 0.41& 0.24& 0.99& 0.58 \\
 0.14& 0.30& 0.97& 0.66 \\
 0.51& 0.13& 0.19& 0.85 \end{array} \right ) 
\left ( \begin{array}{c} x_0 \\ x_1 \\ x_2 \\ x_3 \end{array} \right )
= \left ( \begin{array}{c} 1.0 \\ 2.0 \\ 3.0 \\ 4.0 \end{array} \right ) \]

The answer is given as

\[x = \left ( \begin{array}{c} -4.05205 \\ -12.6056 \\ 1.66091 \\ 8.69377 \end{Array} \right ) \]

The syntax we want to use is:

#+BEGIN_SRC emacs-lisp
(let ((A [[0.18 0.60 0.57 0.96]
	  [0.41 0.24 0.99 0.58]
	  [0.14 0.30 0.97 0.66]
	  [0.51 0.13 0.19 0.85]])
      (b [1.0 2.0 3.0 4.0]))
  (gsl-linalg-LU-solve A b))
#+END_SRC

The module can be found here: [[./gsl-linalg.c]]. There are a few notable features in it. First, I started writing some helper functions to make these modules simpler to write. For example, look how nice this looks to declare the functions and provide the feature.

#+BEGIN_SRC c
int emacs_module_init(struct emacs_runtime *ert)
{
  emacs_env *env = ert->get_environment(ert);
  
  DEFUN("gsl-linalg-LU-solve", Fgsl_linalg_LU_solve, 2, 2,
	"(gsl-linalg-LU-solve A b).\n" \
	"Solve A x = b for x.\n" \
	"Returns a vector containing the solution x.",
	NULL);
  provide(env, "gsl-linalg");
  
  return 0;
}
#+END_SRC 

For now I use these as a shared library defined in these files: [[./emacs-module-helpers.c]] and [[./emacs-module-helpers.h]]. You build the library with =make libemacs-module-helpers.so= using the [[./Makefile]].

Within the module itself, we have to loop over the inputs to create the arrays that GSL wants to solve this problem. Second, after the solution is obtained, we have to build up a vector to return. The solution is in a gsl_vector, and we need to create an array of emacs_value elements containing each element of the gsl_vector as a float, and then create a vector to return to emacs. I use vectors here because it was easy to get the size of the b vector, which is also related to the size of the A matrix.



#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "."))
(require 'gsl-linalg)
#+END_SRC

#+RESULTS:
: gsl-linalg

#+BEGIN_SRC emacs-lisp
(gsl-linalg-LU-solve
 [[0.18 0.60 0.57 0.96]
  [0.41 0.24 0.99 0.58]
  [0.14 0.30 0.97 0.66]
  [0.51 0.13 0.19 0.85]]
 [1.0 2.0 3.0 4.0])
#+END_SRC

#+RESULTS:
: [-4.052050229573973 -12.605611395906903 1.6609116267088417 8.693766928795227]
